import { useState, useEffect, createContext, useContext } from "react";
import { MenuItemWithCategory, CartItem } from "@shared/schema";
import { useToast } from "@/hooks/use-toast";

interface CartContextType {
  cartItems: CartItem[];
  cartCount: number;
  cartTotal: number;
  isPreorder: boolean;
  pickupTime: Date | undefined;
  addToCart: (item: MenuItemWithCategory) => void;
  removeFromCart: (itemId: number) => void;
  updateQuantity: (itemId: number, quantity: number) => void;
  clearCart: () => void;
  isInCart: (itemId: number) => boolean;
  setIsPreorder: (isPreorder: boolean) => void;
  setPickupTime: (pickupTime: Date | undefined) => void;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export function CartProvider({ children }: { children: React.ReactNode }) {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [cartCount, setCartCount] = useState(0);
  const [cartTotal, setCartTotal] = useState(0);
  const [isPreorder, setIsPreorder] = useState(false);
  const [pickupTime, setPickupTime] = useState<Date | undefined>(undefined);
  const { toast } = useToast();

  // Load cart from localStorage on mount
  useEffect(() => {
    const savedCart = localStorage.getItem("cart");
    if (savedCart) {
      try {
        const parsedCart = JSON.parse(savedCart);
        setCartItems(parsedCart);
      } catch (error) {
        console.error("Failed to parse cart from localStorage:", error);
      }
    }
  }, []);

  // Update localStorage whenever cart changes
  useEffect(() => {
    localStorage.setItem("cart", JSON.stringify(cartItems));
    
    // Calculate cart count and total
    const count = cartItems.reduce((total, item) => total + item.quantity, 0);
    const total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    setCartCount(count);
    setCartTotal(total);
  }, [cartItems]);

  const addToCart = (menuItem: MenuItemWithCategory) => {
    setCartItems(prevItems => {
      // Check if item already exists in cart
      const existingItemIndex = prevItems.findIndex(item => item.menuItemId === menuItem.id);
      
      if (existingItemIndex >= 0) {
        // Update quantity if item exists
        const newItems = [...prevItems];
        newItems[existingItemIndex].quantity += 1;
        
        toast({
          title: "Item quantity updated",
          description: `${menuItem.name} quantity increased to ${newItems[existingItemIndex].quantity}`,
          duration: 2000,
        });
        
        return newItems;
      } else {
        // Add new item
        const newItem: CartItem = {
          menuItemId: menuItem.id,
          name: menuItem.name,
          price: Number(menuItem.price),
          quantity: 1,
          image: menuItem.image,
          isPreorder: false,
        };
        
        toast({
          title: "Item added to cart",
          description: `${menuItem.name} has been added to your cart`,
          duration: 2000,
        });
        
        return [...prevItems, newItem];
      }
    });
  };

  const removeFromCart = (itemId: number) => {
    setCartItems(prevItems => {
      const itemToRemove = prevItems.find(item => item.menuItemId === itemId);
      
      if (itemToRemove) {
        toast({
          title: "Item removed from cart",
          description: `${itemToRemove.name} has been removed from your cart`,
          duration: 2000,
        });
      }
      
      return prevItems.filter(item => item.menuItemId !== itemId);
    });
  };

  const updateQuantity = (itemId: number, quantity: number) => {
    if (quantity <= 0) {
      removeFromCart(itemId);
      return;
    }
    
    setCartItems(prevItems => {
      return prevItems.map(item => {
        if (item.menuItemId === itemId) {
          return { ...item, quantity };
        }
        return item;
      });
    });
  };

  const clearCart = () => {
    setCartItems([]);
    toast({
      title: "Cart cleared",
      description: "All items have been removed from your cart",
      duration: 2000,
    });
  };
  
  const isInCart = (itemId: number) => {
    return cartItems.some(item => item.menuItemId === itemId);
  };

  const value = {
    cartItems,
    cartCount,
    cartTotal,
    isPreorder,
    pickupTime,
    addToCart,
    removeFromCart,
    updateQuantity,
    clearCart,
    isInCart,
    setIsPreorder,
    setPickupTime,
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error("useCart must be used within a CartProvider");
  }
  return context;
}